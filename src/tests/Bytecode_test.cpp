#include "ScrapTest.h"


TEST (BytecodeTest, TestInstructionMap)
{
	ASSERT_EQ(g_instructionMap[OP_POP].instr,			OP_POP);
	ASSERT_EQ(g_instructionMap[OP_COPY].instr, 			OP_COPY);
	ASSERT_EQ(g_instructionMap[OP_I_LOAD].instr, 		OP_I_LOAD);
	ASSERT_EQ(g_instructionMap[OP_I_RETURN].instr, 		OP_I_RETURN);
	ASSERT_EQ(g_instructionMap[OP_I_STORE].instr,		OP_I_STORE);
	ASSERT_EQ(g_instructionMap[OP_I_PUSH].instr,		OP_I_PUSH);
	ASSERT_EQ(g_instructionMap[OP_F_LOAD].instr, 		OP_F_LOAD);
	ASSERT_EQ(g_instructionMap[OP_F_RETURN].instr, 		OP_F_RETURN);
	ASSERT_EQ(g_instructionMap[OP_F_STORE].instr,		OP_F_STORE);
	ASSERT_EQ(g_instructionMap[OP_F_PUSH].instr,		OP_F_PUSH);
	ASSERT_EQ(g_instructionMap[OP_D_LOAD].instr, 		OP_D_LOAD);
	ASSERT_EQ(g_instructionMap[OP_D_RETURN].instr, 		OP_D_RETURN);
	ASSERT_EQ(g_instructionMap[OP_D_STORE].instr,		OP_D_STORE);
	ASSERT_EQ(g_instructionMap[OP_D_PUSH].instr,		OP_D_PUSH);
	ASSERT_EQ(g_instructionMap[OP_L_LOAD].instr, 		OP_L_LOAD);
	ASSERT_EQ(g_instructionMap[OP_L_RETURN].instr, 		OP_L_RETURN);
	ASSERT_EQ(g_instructionMap[OP_L_STORE].instr,		OP_L_STORE);
	ASSERT_EQ(g_instructionMap[OP_L_PUSH].instr,		OP_L_PUSH);
	ASSERT_EQ(g_instructionMap[OP_C_LOAD].instr, 		OP_C_LOAD);
	ASSERT_EQ(g_instructionMap[OP_C_RETURN].instr, 		OP_C_RETURN);
	ASSERT_EQ(g_instructionMap[OP_C_STORE].instr,		OP_C_STORE);
	ASSERT_EQ(g_instructionMap[OP_C_PUSH].instr,		OP_C_PUSH);
	ASSERT_EQ(g_instructionMap[OP_B_LOAD].instr, 		OP_B_LOAD);
	ASSERT_EQ(g_instructionMap[OP_B_RETURN].instr, 		OP_B_RETURN);
	ASSERT_EQ(g_instructionMap[OP_B_STORE].instr,		OP_B_STORE);
	ASSERT_EQ(g_instructionMap[OP_B_PUSH].instr,		OP_B_PUSH);
	ASSERT_EQ(g_instructionMap[OP_F2D].instr,			OP_F2D);
	ASSERT_EQ(g_instructionMap[OP_F2L].instr,			OP_F2L);
	ASSERT_EQ(g_instructionMap[OP_F2I].instr,			OP_F2I);
	ASSERT_EQ(g_instructionMap[OP_F2C].instr,			OP_F2C);
	ASSERT_EQ(g_instructionMap[OP_F2B].instr,			OP_F2B);
	ASSERT_EQ(g_instructionMap[OP_D2F].instr,			OP_D2F);
	ASSERT_EQ(g_instructionMap[OP_D2L].instr,			OP_D2L);
	ASSERT_EQ(g_instructionMap[OP_D2I].instr,			OP_D2I);
	ASSERT_EQ(g_instructionMap[OP_D2C].instr,			OP_D2C);
	ASSERT_EQ(g_instructionMap[OP_D2B].instr,			OP_D2B);
	ASSERT_EQ(g_instructionMap[OP_L2I].instr,			OP_L2I);
	ASSERT_EQ(g_instructionMap[OP_L2F].instr,			OP_L2F);
	ASSERT_EQ(g_instructionMap[OP_L2D].instr,			OP_L2D);
	ASSERT_EQ(g_instructionMap[OP_L2C].instr,			OP_L2C);
	ASSERT_EQ(g_instructionMap[OP_L2B].instr,			OP_L2B);
	ASSERT_EQ(g_instructionMap[OP_I2L].instr,			OP_I2L);
	ASSERT_EQ(g_instructionMap[OP_I2F].instr,			OP_I2F);
	ASSERT_EQ(g_instructionMap[OP_I2D].instr,			OP_I2D);
	ASSERT_EQ(g_instructionMap[OP_I2C].instr,			OP_I2C);
	ASSERT_EQ(g_instructionMap[OP_I2B].instr,			OP_I2B);
	ASSERT_EQ(g_instructionMap[OP_C2I].instr,			OP_C2I);
	ASSERT_EQ(g_instructionMap[OP_C2L].instr,			OP_C2L);
	ASSERT_EQ(g_instructionMap[OP_C2F].instr,			OP_C2F);
	ASSERT_EQ(g_instructionMap[OP_C2D].instr,			OP_C2D);
	ASSERT_EQ(g_instructionMap[OP_C2B].instr,			OP_C2B);
	ASSERT_EQ(g_instructionMap[OP_B2I].instr,			OP_B2I);
	ASSERT_EQ(g_instructionMap[OP_B2F].instr,			OP_B2F);
	ASSERT_EQ(g_instructionMap[OP_B2D].instr,			OP_B2D);
	ASSERT_EQ(g_instructionMap[OP_B2L].instr,			OP_B2L);
	ASSERT_EQ(g_instructionMap[OP_B2C].instr,			OP_B2C);
	ASSERT_EQ(g_instructionMap[OP_I_ADD].instr,			OP_I_ADD);
	ASSERT_EQ(g_instructionMap[OP_I_SUB].instr,			OP_I_SUB);
	ASSERT_EQ(g_instructionMap[OP_I_MUL].instr,			OP_I_MUL);
	ASSERT_EQ(g_instructionMap[OP_I_DIV].instr,			OP_I_DIV);
	ASSERT_EQ(g_instructionMap[OP_F_ADD].instr,			OP_F_ADD);
	ASSERT_EQ(g_instructionMap[OP_F_SUB].instr,			OP_F_SUB);
	ASSERT_EQ(g_instructionMap[OP_F_MUL].instr,			OP_F_MUL);
	ASSERT_EQ(g_instructionMap[OP_F_DIV].instr,			OP_F_DIV);
	ASSERT_EQ(g_instructionMap[OP_D_ADD].instr,			OP_D_ADD);
	ASSERT_EQ(g_instructionMap[OP_D_SUB].instr,			OP_D_SUB);
	ASSERT_EQ(g_instructionMap[OP_D_MUL].instr,			OP_D_MUL);
	ASSERT_EQ(g_instructionMap[OP_D_DIV].instr,			OP_D_DIV);
	ASSERT_EQ(g_instructionMap[OP_L_ADD].instr,			OP_L_ADD);
	ASSERT_EQ(g_instructionMap[OP_L_SUB].instr,			OP_L_SUB);
	ASSERT_EQ(g_instructionMap[OP_L_MUL].instr,			OP_L_MUL);
	ASSERT_EQ(g_instructionMap[OP_L_DIV].instr,			OP_L_DIV);
	ASSERT_EQ(g_instructionMap[OP_C_ADD].instr,			OP_C_ADD);
	ASSERT_EQ(g_instructionMap[OP_C_SUB].instr,			OP_C_SUB);
	ASSERT_EQ(g_instructionMap[OP_C_MUL].instr,			OP_C_MUL);
	ASSERT_EQ(g_instructionMap[OP_C_DIV].instr,			OP_C_DIV);
	ASSERT_EQ(g_instructionMap[OP_I_SHL].instr, 		OP_I_SHL);
	ASSERT_EQ(g_instructionMap[OP_I_SHR].instr,			OP_I_SHR);
	ASSERT_EQ(g_instructionMap[OP_I_MOD].instr,			OP_I_MOD);
	ASSERT_EQ(g_instructionMap[OP_I_XOR].instr,			OP_I_XOR);
	ASSERT_EQ(g_instructionMap[OP_I_AND].instr,			OP_I_AND);
	ASSERT_EQ(g_instructionMap[OP_I_OR].instr, 			OP_I_OR);
	ASSERT_EQ(g_instructionMap[OP_L_SHL].instr, 		OP_L_SHL);
	ASSERT_EQ(g_instructionMap[OP_L_SHR].instr,			OP_L_SHR);
	ASSERT_EQ(g_instructionMap[OP_L_MOD].instr,			OP_L_MOD);
	ASSERT_EQ(g_instructionMap[OP_L_XOR].instr,			OP_L_XOR);
	ASSERT_EQ(g_instructionMap[OP_L_AND].instr,			OP_L_AND);
	ASSERT_EQ(g_instructionMap[OP_L_OR].instr, 			OP_L_OR);
	ASSERT_EQ(g_instructionMap[OP_C_SHL].instr, 		OP_C_SHL);
	ASSERT_EQ(g_instructionMap[OP_C_SHR].instr,			OP_C_SHR);
	ASSERT_EQ(g_instructionMap[OP_C_MOD].instr,			OP_C_MOD);
	ASSERT_EQ(g_instructionMap[OP_C_XOR].instr,			OP_C_XOR);
	ASSERT_EQ(g_instructionMap[OP_C_AND].instr,			OP_C_AND);
	ASSERT_EQ(g_instructionMap[OP_C_OR].instr, 			OP_C_OR);
	ASSERT_EQ(g_instructionMap[OP_UNDEFINED].instr,		OP_UNDEFINED);

	ASSERT_EQ(g_instructionMap[OP_BRANCH].instr, 		OP_BRANCH);
    ASSERT_EQ(g_instructionMap[OP_BIFNULL].instr, 		OP_BIFNULL);
    ASSERT_EQ(g_instructionMap[OP_BIFNOTNULL].instr, 	OP_BIFNOTNULL);
    ASSERT_EQ(g_instructionMap[OP_BIFGREATER].instr, 	OP_BIFGREATER);
    ASSERT_EQ(g_instructionMap[OP_BIFGREATEREQ].instr, 	OP_BIFGREATEREQ);
    ASSERT_EQ(g_instructionMap[OP_BIFLESS].instr, 		OP_BIFLESS);
    ASSERT_EQ(g_instructionMap[OP_BIFLESSEQ].instr, 	OP_BIFLESSEQ);
    ASSERT_EQ(g_instructionMap[OP_BIFEQUAL].instr, 		OP_BIFEQUAL);
    ASSERT_EQ(g_instructionMap[OP_BIFNOTEQUAL].instr, 	OP_BIFNOTEQUAL);
}

TEST (BytecodeTest, TestArglen) 
{
	ASSERT_EQ(arglen(OP_POP), 			0);
	ASSERT_EQ(arglen(OP_COPY), 			0);

	ASSERT_EQ(arglen(OP_I_LOAD), 		4);
	ASSERT_EQ(arglen(OP_I_RETURN), 		0);
	ASSERT_EQ(arglen(OP_I_STORE), 		4);
	ASSERT_EQ(arglen(OP_I_PUSH), 		4);

	ASSERT_EQ(arglen(OP_F_LOAD), 		4);
	ASSERT_EQ(arglen(OP_F_RETURN), 		0);
	ASSERT_EQ(arglen(OP_F_STORE), 		4);
	ASSERT_EQ(arglen(OP_F_PUSH), 		4);

	ASSERT_EQ(arglen(OP_D_LOAD), 		4);
	ASSERT_EQ(arglen(OP_D_RETURN), 		0);
	ASSERT_EQ(arglen(OP_D_STORE), 		4);
	ASSERT_EQ(arglen(OP_D_PUSH), 		8);

	ASSERT_EQ(arglen(OP_L_LOAD), 		4);
	ASSERT_EQ(arglen(OP_L_RETURN), 		0);
	ASSERT_EQ(arglen(OP_L_STORE), 		4);
	ASSERT_EQ(arglen(OP_L_PUSH), 		8);

	ASSERT_EQ(arglen(OP_C_LOAD), 		4);
	ASSERT_EQ(arglen(OP_C_RETURN), 		0);
	ASSERT_EQ(arglen(OP_C_STORE), 		4);
	ASSERT_EQ(arglen(OP_C_PUSH), 		1);

	ASSERT_EQ(arglen(OP_B_LOAD), 		4);
	ASSERT_EQ(arglen(OP_B_RETURN), 		0);
	ASSERT_EQ(arglen(OP_B_STORE), 		4);
	ASSERT_EQ(arglen(OP_B_PUSH), 		1);

	ASSERT_EQ(arglen(OP_F2D),			0);
	ASSERT_EQ(arglen(OP_F2L),			0);
	ASSERT_EQ(arglen(OP_F2I),			0);
	ASSERT_EQ(arglen(OP_F2C),			0);
	ASSERT_EQ(arglen(OP_F2B),			0);
	ASSERT_EQ(arglen(OP_D2F),			0);
	ASSERT_EQ(arglen(OP_D2L),			0);
	ASSERT_EQ(arglen(OP_D2I),			0);
	ASSERT_EQ(arglen(OP_D2C),			0);
	ASSERT_EQ(arglen(OP_D2B),			0);
	ASSERT_EQ(arglen(OP_L2I),			0);
	ASSERT_EQ(arglen(OP_L2F),			0);
	ASSERT_EQ(arglen(OP_L2D),			0);
	ASSERT_EQ(arglen(OP_L2C),			0);
	ASSERT_EQ(arglen(OP_L2B),			0);
	ASSERT_EQ(arglen(OP_I2L),			0);
	ASSERT_EQ(arglen(OP_I2F),			0);
	ASSERT_EQ(arglen(OP_I2D),			0);
	
	ASSERT_EQ(arglen(OP_I2C),			0);
	ASSERT_EQ(arglen(OP_I2B),			0);
	ASSERT_EQ(arglen(OP_C2I),			0);
	ASSERT_EQ(arglen(OP_C2L),			0);
	ASSERT_EQ(arglen(OP_C2F),			0);
	ASSERT_EQ(arglen(OP_C2D),			0);
	ASSERT_EQ(arglen(OP_C2B),			0);
	ASSERT_EQ(arglen(OP_B2I),			0);
	ASSERT_EQ(arglen(OP_B2F),			0);
	ASSERT_EQ(arglen(OP_B2D),			0);
	ASSERT_EQ(arglen(OP_B2L),			0);
	ASSERT_EQ(arglen(OP_B2C),			0);

	ASSERT_EQ(arglen(OP_I_ADD),			0);
	ASSERT_EQ(arglen(OP_I_SUB),			0);
	ASSERT_EQ(arglen(OP_I_MUL),			0);
	ASSERT_EQ(arglen(OP_I_DIV),			0);
	ASSERT_EQ(arglen(OP_F_ADD),			0);
	ASSERT_EQ(arglen(OP_F_SUB),			0);
	ASSERT_EQ(arglen(OP_F_MUL),			0);
	ASSERT_EQ(arglen(OP_F_DIV),			0);
	ASSERT_EQ(arglen(OP_D_ADD),			0);
	ASSERT_EQ(arglen(OP_D_SUB),			0);
	ASSERT_EQ(arglen(OP_D_MUL),			0);
	ASSERT_EQ(arglen(OP_D_DIV),			0);
	ASSERT_EQ(arglen(OP_L_ADD),			0);
	ASSERT_EQ(arglen(OP_L_SUB),			0);
	ASSERT_EQ(arglen(OP_L_MUL),			0);
	ASSERT_EQ(arglen(OP_L_DIV),			0);
	ASSERT_EQ(arglen(OP_C_ADD),			0);
	ASSERT_EQ(arglen(OP_C_SUB),			0);
	ASSERT_EQ(arglen(OP_C_MUL),			0);
	ASSERT_EQ(arglen(OP_C_DIV),			0);
	ASSERT_EQ(arglen(OP_I_SHL),			0);
	ASSERT_EQ(arglen(OP_I_SHR),			0);
	ASSERT_EQ(arglen(OP_I_MOD),			0);
	ASSERT_EQ(arglen(OP_I_XOR),			0);
	ASSERT_EQ(arglen(OP_I_AND),			0);
	ASSERT_EQ(arglen(OP_I_OR),			0);
	ASSERT_EQ(arglen(OP_L_SHL),			0);
	ASSERT_EQ(arglen(OP_L_SHR),			0);
	ASSERT_EQ(arglen(OP_L_MOD),			0);
	ASSERT_EQ(arglen(OP_L_XOR),			0);
	ASSERT_EQ(arglen(OP_L_AND),			0);
	ASSERT_EQ(arglen(OP_L_OR),			0);
	ASSERT_EQ(arglen(OP_C_SHL),			0);
	ASSERT_EQ(arglen(OP_C_SHR),			0);
	ASSERT_EQ(arglen(OP_C_MOD),			0);
	ASSERT_EQ(arglen(OP_C_XOR),			0);
	ASSERT_EQ(arglen(OP_C_AND),			0);
	ASSERT_EQ(arglen(OP_C_OR),			0);

	ASSERT_EQ(arglen(OP_BRANCH),		4);
	ASSERT_EQ(arglen(OP_BIFNULL),		4);
	ASSERT_EQ(arglen(OP_BIFNOTNULL),	4);
	ASSERT_EQ(arglen(OP_BIFGREATER),	4);
	ASSERT_EQ(arglen(OP_BIFGREATEREQ),	4);
	ASSERT_EQ(arglen(OP_BIFLESS),		4);
	ASSERT_EQ(arglen(OP_BIFLESSEQ),		4);
	ASSERT_EQ(arglen(OP_BIFEQUAL),		4);
	ASSERT_EQ(arglen(OP_BIFNOTEQUAL),	4);
}

